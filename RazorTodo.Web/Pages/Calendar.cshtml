@page
@model RazorTodo.Web.Pages.CalendarModel
@section Styles{
    <link rel="stylesheet" href="~/css/bbljCalendar.css" asp-append-version="true">
}

<h1 class="page-title">
    BBLJ行事曆📅
</h1>
<div class="dial-wrapper">
    <label for="selYearDial">
        <select id="selYearDial" name="Year" onchange="dial()">
            <option id="opt1" value="1">1</option>
            <option id="opt2" value="2">2</option>
            <option id="opt3" value="3">3</option>
            <option id="opt4" value="4">4</option>
            <option id="opt5" value="5">5</option>
        </select>
        年
    </label>
    <label for="selMonthDial">
        <select id="selMonthDial" name="Month" onchange="dial()">
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
            <option value="9">9</option>
            <option value="10">10</option>
            <option value="11">11</option>
            <option value="12">12</option>
        </select>
        月
    </label>
</div>
<div class="calendar-wrapper">
    <canvas id="calendar"></canvas>
</div>
<div class="btn-wrapper">
    <a class="mdc-button mdc-button--outlined" href="/#!/1">
        <span class="mdc-button__ripple"></span>
        <span class="mdc-button__focus-ring"></span>
        <span class="mdc-button__label">回首頁</span>
    </a>
</div>

@section Scripts{
    <script type="text/javascript" charset="UTF-8" src="~/js/bbljCalendar-1.0.1.js" asp-append-version="true"></script>
    <script>
        /** @@type {BBLJCalendar} */
        let calendar = null;
        const apiEndPoint = "/apiCalendar";

        window.addEventListener("DOMContentLoaded", onLoaded);

        async function onLoaded() {
            initDial();
            let canvas = document.getElementById("calendar");
            let y = Number(document.getElementById("selYearDial").value);
            let m = Number(document.getElementById("selMonthDial").value);
            let config = new BBLJCalendarConfig();
            config.year = y;
            config.month = m;
            try {
                config.dateInfos = await getCalendarDateInfos(y, m);
            } catch (e) {
                config.dateInfos = null;
            }
            config.onDateClicked = function (dateInfo) {
                if (dateInfo) {
                    /** @@type {Date} */
                    let clickedDate = dateInfo.date
                    location.href = `DateDetail?y=${clickedDate.getFullYear()}&m=${clickedDate.getMonth() + 1}&d=${clickedDate.getDate()}`;
                }
            }
            calendar = BBLJCalendar.mount(canvas, config);
        }

        function initDial() {
            let now = new Date();
            let optYears = document.querySelectorAll("#selYearDial *");
            for (let i = 0; i < optYears.length; i++) {
                /** @@type {HTMLOptionElement} */
                let opt = optYears[i];
                opt.value = now.getFullYear() - 2 + i;
                opt.innerHTML = now.getFullYear() - 2 + i;
            }
            let y_m = getYMfromStorage();
            document.getElementById("selYearDial").value = `${y_m.y}`;
            document.getElementById("selMonthDial").value = `${y_m.m}`;
        }

        function getYMfromStorage() {
            let y_m = {
                y: localStorage.getItem('calendarY'),
                m: localStorage.getItem('calendarM'),
            };
            let now = new Date();
            if (Number(y_m.y) != NaN) {
                if (Number(y_m.y) >= now.getFullYear() - 2 && Number(y_m.y) <= now.getFullYear() + 2) {
                    y_m.y = `${Number(y_m.y)}`;
                } else {
                    y_m.y = `${now.getFullYear()}`;
                }
            } else {
                y_m.y = `${now.getFullYear()}`;
            }
            if (Number(y_m.m) != NaN) {
                if (Number(y_m.m) >= 1 && Number(y_m.m) <= 12) {
                    y_m.m = `${Number(y_m.m)}`;
                } else {
                    y_m.m = `${now.getMonth() + 1}`;
                }
            } else {
                y_m.m = `${now.getMonth() + 1}`;
            }
            return y_m;
        }

        async function dial() {
            let y = Number(document.getElementById("selYearDial").value);
            let m = Number(document.getElementById("selMonthDial").value);
            calendar.config.year = y;
            calendar.config.month = m;
            setYMToStorage({
                y:y,
                m:m,
            });
            try {
                calendar.config.dateInfos = await getCalendarDateInfos(y, m);
            } catch (e) {
                calendar.config.dateInfos = null;
            }
            calendar.updateCalendar();
        }

        function setYMToStorage(y_m){
            localStorage.setItem('calendarY', y_m.y);
            localStorage.setItem('calendarM', y_m.m);
        }

        /** @@param y {number} @@param m {number} @@returns {[BBLJCalendarDateInfo]}*/
        async function getCalendarDateInfos(y, m) {
            let dateInfos = [];
            await fetch(`${apiEndPoint}?y=${y}&m=${m}`, {
                method: "GET"
            }).then(function (res) {
                return res.json();
            }).then(function (gcs) {
                if (Array.isArray(gcs)) {
                    for (let i = 0; i < gcs.length; i++) {
                        let dateInfo = new BBLJCalendarDateInfo();
                        dateInfo.date = new Date(gcs[i]["DateString"]);
                        dateInfo.description = gcs[i]["Description"];
                        dateInfo.isHoliday = gcs[i]["IsHoliday"] == 1;
                        dateInfos.push(dateInfo);
                    }
                }
            });
            return dateInfos;
        }
        
    </script>
}